const jwt = require('jsonwebtoken');

const jwtMiddleware = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    
    if (!authHeader) {
        return res.status(403).json({ error: 'Authorization header is missing' });
    }

    const tokenParts = authHeader.split(' ');
    if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
        return res.status(400).json({ error: 'Invalid token format. Use: Bearer <token>' });
    }

    const token = tokenParts[1];

    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
        if (err) {
            let errorMessage = 'Token error';
            
            if (err.name === 'JsonWebTokenError') {
                errorMessage = 'Invalid token signature or malformed token';
            } else if (err.name === 'TokenExpiredError') {
                errorMessage = 'Token expired';
            } else if (err.name === 'NotBeforeError') {
                errorMessage = 'Token not yet active';
            }

            return res.status(401).json({ 
                error: errorMessage,
                details: {
                    name: err.name,
                    message: err.message,
                    expiredAt: err.expiredAt 
                }
            });
        }

        req.user = decoded;
        next();
    });
};

module.exports = jwtMiddleware;